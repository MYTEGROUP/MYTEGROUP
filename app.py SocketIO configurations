from flask import Flask
from flask_socketio import SocketIO, Namespace, emit
from Backend import discussions, notifications
import os

# Initialize Flask app
app = Flask(__name__)
app.config['SECRET_KEY'] = os.getenv('SECRET_KEY', 'secret!')

# Initialize SocketIO with CORS support
socketio = SocketIO(app, cors_allowed_origins="*")

# Define Namespace for Discussions
class DiscussionsNamespace(Namespace):
    def on_connect(self):
        print('Client connected to Discussions namespace')
        emit('response', {'message': 'Connected to Discussions'})

    def on_disconnect(self):
        print('Client disconnected from Discussions namespace')

    def on_new_comment(self, data):
        """
        Handle new comment event.
        Processes the comment using the discussions module and broadcasts it to all clients.
        """
        processed_data = discussions.handle_new_comment(data)
        emit('new_comment', processed_data, broadcast=True)

# Define Namespace for Notifications
class NotificationsNamespace(Namespace):
    def on_connect(self):
        print('Client connected to Notifications namespace')
        emit('response', {'message': 'Connected to Notifications'})

    def on_disconnect(self):
        print('Client disconnected from Notifications namespace')

    def on_send_notification(self, data):
        """
        Handle send_notification event.
        Creates a notification using the notifications module and broadcasts it to all clients.
        """
        notification = notifications.create_notification(data)
        emit('new_notification', notification, broadcast=True)

# Register the namespaces with SocketIO
socketio.on_namespace(DiscussionsNamespace('/discussions'))
socketio.on_namespace(NotificationsNamespace('/notifications'))

# Define a simple route
@app.route('/')
def index():
    return "SocketIO is configured for real-time communications."

# Run the Flask app with SocketIO
if __name__ == '__main__':
    socketio.run(app, debug=True)